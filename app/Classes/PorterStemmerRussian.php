<?php

namespace App\Classes;

define('MODE', 'u');
define('RVRE', '/^(.*?[аеёиоуыэюя])(.*)$/'.MODE);
define('PERFECTIVEGROUND', '/((ив|ивши|ившись|ыв|ывши|ывшись)|((?<=[ая])(в|вши|вшись)))$/'.MODE);
define('REFLEXIVE', '/(с[яь])$/'.MODE);
define('ADJECTIVE', '/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/'.MODE);
define('PARTICIPLE', '/((ивш|ывш|ующ)|((?<=[ая])(ем|нн|вш|ющ|щ)))$/'.MODE);
define('VERB', '/((ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|уют|ит|ыт|ены|ить|ыть|ишь|ую|ю)|((?<=[ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)))$/'.MODE);
define('ADVERB_SUFFIX', '/(жды|-либо|-нибудь|учи|ючи)$/'.MODE);
define('NOUN', '/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/'.MODE);
define('DERIVATIONAL', '/[^аеёиоуыэюя][аеёиоуыэюя]+[^аеёиоуыэюя]+[аеёиоуыэюя].*(?<=о)сть?$/'.MODE);
define('NOUN_SUFFIX', '/(иров|ан|ян|анин|янин|ач|ени|ет|еств|есть|ец|ца|изм|изн|ик|ник|ин|ист|тель|их|иц|ниц|льник|льщик|льщиц|ни|ун|чик|чиц|щик|еньк|оньк|енк|онк|ашк|ищ|ок|инк|очк|ушк|юшк|ышк|ишк|очек|ечк|ушек|ышек|ыш)$/'.MODE);
define('ADJECTIVE_SUFFIX', '/(ал|ел|ан|ян|аст|ев|ов|еват|оват|ен|енн|енск|инск|лив|чив|ив|ин|овит|ит|шн|тельн|уч|чат|еньк|оньк|ехоньк|оханьк|ешеньк|ошеньк)$/'.MODE);
define('VERB_SUFFIX', '/(ка|ева|ова|ыва|ива|нича|ну|ствова|ть|ти|ирова)$/'.MODE);

class PorterStemmerRussian
{
    public static $LowerMode = FALSE;
    public static $RV = '';

    private static function clear($pattern)
    {
        $uncleared = self::$RV;
        self::$RV = preg_replace($pattern, '', self::$RV);
        $replaced = str_replace(self::$RV, '', $uncleared);
        return $uncleared !== self::$RV;
    }

    public static function word(&$word)
    {
        if ( self::$LowerMode ) $word = mb_strtolower($word);

        //Для каждого слова:
        // RV — это часть слова после первого глассного
        // R1 — это часть слова после первого согласного, следующего после глассного
        // R2 — это часть слова после первого согласного, следующего после глассного в R1
        if (!preg_match(RVRE, $word, $word_parts) || !$word_parts[2]) return;
        list( ,$start, self::$RV) = $word_parts;

        // [ШАГ 1]
        // Найти окончание ПРИЧАСТИЯ СОВЕРШЕННОГО ВИДА.
        // Если окончание найдено, то удалить его и завершить первый шаг.
        // Иначе удалить окончания ВОЗРАТНОЙ ЧАСТИЦЫ, а затем удалить окончания
        // КАЧЕСТВЕННЫХ, ГЛАГОЛОВ и СУЩЕСТВИТЕЛЬНЫХ, как только одно из окончаний
        // будет удалено, завершить первый шаг.
        if (!self::clear(PERFECTIVEGROUND)) // Причастие совершенного вида
        {
            self::clear(REFLEXIVE); // Возвратное (сь, ся)
            if (self::clear(ADJECTIVE)) // Прилагательное
            {
                self::clear(ADJECTIVE_SUFFIX);
                self::clear(PARTICIPLE); // Причастие
            }
            else
            {
                if ( !self::clear(ADVERB_SUFFIX) ) // Наречие
                {
                    if (self::clear(VERB)) // Глагол
                    {
                        self::clear(VERB_SUFFIX);
                    }
                    else
                    {
                        self::clear(NOUN); // Существительное
                        while (self::clear(NOUN_SUFFIX));
                    }
                }
            }
        }

        // [ШАГ 2]
        // Если слово оканчивается на символ 'и' , то удалить его.
        self::clear('/и$/'.MODE);

        // [ШАГ 3]
        // Найти СЛОВООБРАЗУЮЩЕЕ окончание в R2, если окончание найдено, то удалить его.
        if ( preg_match(DERIVATIONAL, self::$RV) ) // Словообразующее
            self::clear('/ость?$/'.MODE);

        // [ШАГ 4]
        // Заменить двойную нн (nn) одинарной, или найти окончание
        // ПРИЛАГАТЕЛЬНОГО ПРЕВОСХОДНОЙ СТЕПЕНИ, если окончание найдено,
        // то удалить его и заменить двойную 'нн' одинарной, или если
        // слово оканчивается на 'ь', то удалить его.
        if (!self::clear('/ь$/'.MODE))
        {
            self::clear('/ейше?/'.MODE);
            self::$RV = preg_replace('/нн$/'.MODE, 'н', self::$RV);
        }

        $word = $start.self::$RV;
        self::$RV = '';

        return $word;
    }
};
